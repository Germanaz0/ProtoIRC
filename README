ProtoIRC

Rapid IRC client/bot prototyping for PHP >= 5.3

Author: Zane Ashby
Web: http://github.com/ZaneA/ProtoIRC

ProtoIRC is a hackable framework that makes it easy to prototype clients and bots for IRC, it works
by handling the connection to the IRC server and letting you write callbacks for everything else.
It makes extensive use of closures and regular expressions.

A "Hello-World" (echo) example is as follows:

<?php
require('protoirc.php');

$irc = new ProtoIRC('hostname', 6667, 'NickName', function ($irc) {
        // This code will run on connect
        $irc->send('JOIN #channel');
});

$irc->in('/^:(.*)!~.* PRIVMSG (.*) :!echo (.*)/', function ($irc, $nick, $channel, $args) {
        // Arguments are self-documenting
        $irc->send($channel, "Echoing '{$args}' for you {$nick}", 'green');
});

$irc->go();
?>

See client.php for a slightly more in depth example. Use the runclient.sh to run it using rlwrap.
See addons/prototyping.php for an undocumented prototyping helper..
See addons/customactions.php for a custom handler demo..

Available API:
It's probably easier just to look at protoirc.php, but here is the basic run down.

<?php
$irc = new ProtoIRC('hostname', port, 'nickname', function ($irc) {
        // Startup code
});

// Useful variables
$irc->nick;
$irc->last; // Last message destination

// Send a message through the IRC connection
$irc->send('RAW MESSAGE');
$irc->send('#destination', 'message');
$irc->send('#destination', 'message', 'color');

// Echo to the terminal
$irc->termEcho('message');
$irc->termEcho('message', 'color');

// Bind a regex to a function, on either command (STDIN), in, or out
$irc->bind('command/in/out', 'regex', function ($irc, $first_match, $second_match etc) {
        // Runs if the regex matches

        // Run stuff asynchronously
        $irc->async(function ($irc) use ($first_match, $second_match) {
                sleep(5);
                $irc->send('#channel', 'This will print after 5 seconds');
        });

        $irc->send('#channel', 'This will print before the above statement');

        // return false in 'out' callback to stop message being sent
});

// Or use the shortcuts...
$irc->command('regex', function ($irc, $first_match, $second_match etc) {});
$irc->in('regex', function ($irc, $first_match, $second_match etc) {});
$irc->out('regex', function ($irc, $first_match, $second_match etc) {});

// Bind a timer
$irc->bind('timer', 60, function ($irc) {
        // Runs every minute
});

// Shortcut...
$irc->timer(60, function ($irc) {});

// User defined callbacks
$irc->in('/^:(.*)!~.* PRIVMSG (.*) :!(.*)/', function ($irc, $nick, $channel, $args) {
        $irc->msg($args, $nick, $channel); // Shortcut for $irc->call('msg', $args etc);
});

// Shortcut for $irc->bind('msg', etc
$irc->msg('/^echo (.*)/', function ($irc, $nick, $channel, $line) {
        $irc->send($irc->last, $line);
});
